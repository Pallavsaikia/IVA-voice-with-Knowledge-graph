package example


import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"sync"

	"github.com/gorilla/websocket"
)

var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true // Allow connections from any origin
	},
}

type Client struct {
	ID     string
	Conn   *websocket.Conn
	Send   chan []byte
	Room   string
}

type Hub struct {
	clients    map[*Client]bool
	register   chan *Client
	unregister chan *Client
	broadcast  chan []byte
	rooms      map[string][]*Client
	mutex      sync.RWMutex
}

type Message struct {
	Type   string      `json:"type"`
	From   string      `json:"from,omitempty"`
	To     string      `json:"to,omitempty"`
	Room   string      `json:"room,omitempty"`
	Data   interface{} `json:"data,omitempty"`
}

func newHub() *Hub {
	return &Hub{
		clients:    make(map[*Client]bool),
		register:   make(chan *Client),
		unregister: make(chan *Client),
		broadcast:  make(chan []byte),
		rooms:      make(map[string][]*Client),
	}
}

func (h *Hub) run() {
	for {
		select {
		case client := <-h.register:
			h.mutex.Lock()
			h.clients[client] = true
			h.mutex.Unlock()
			
			log.Printf("Client %s connected", client.ID)

		case client := <-h.unregister:
			h.mutex.Lock()
			if _, ok := h.clients[client]; ok {
				delete(h.clients, client)
				close(client.Send)
				
				// Remove from room
				if client.Room != "" {
					room := h.rooms[client.Room]
					for i, c := range room {
						if c == client {
							h.rooms[client.Room] = append(room[:i], room[i+1:]...)
							break
						}
					}
				}
			}
			h.mutex.Unlock()
			
			// Notify other clients in the same room
			h.notifyRoomMembers(client.Room, client.ID, "user-left")
			
			log.Printf("Client %s left room %s", client.ID, client.Room)

		case message := <-h.broadcast:
			h.mutex.RLock()
			for client := range h.clients {
				select {
				case client.Send <- message:
				default:
					close(client.Send)
					delete(h.clients, client)
				}
			}
			h.mutex.RUnlock()
		}
	}
}

func (h *Hub) notifyRoomMembers(room, userID, eventType string) {
	h.mutex.RLock()
	defer h.mutex.RUnlock()
	
	if clients, exists := h.rooms[room]; exists {
		notification := Message{
			Type: eventType,
			From: userID,
			Room: room,
		}
		
		data, _ := json.Marshal(notification)
		
		for _, client := range clients {
			if client.ID != userID {
				select {
				case client.Send <- data:
				default:
					close(client.Send)
				}
			}
		}
	}
}

func (h *Hub) sendToClient(targetID string, message []byte) {
	h.mutex.RLock()
	defer h.mutex.RUnlock()
	
	for client := range h.clients {
		if client.ID == targetID {
			select {
			case client.Send <- message:
			default:
				close(client.Send)
			}
			break
		}
	}
}

func (c *Client) readPump(hub *Hub) {
	defer func() {
		hub.unregister <- c
		c.Conn.Close()
	}()

	for {
		_, messageBytes, err := c.Conn.ReadMessage()
		if err != nil {
			log.Printf("Error reading message: %v", err)
			break
		}

		var msg Message
		if err := json.Unmarshal(messageBytes, &msg); err != nil {
			log.Printf("Error parsing message: %v", err)
			continue
		}

		msg.From = c.ID

		switch msg.Type {
		case "offer", "answer", "ice-candidate":
			// Forward WebRTC signaling messages to specific client
			if msg.To != "" {
				data, _ := json.Marshal(msg)
				hub.sendToClient(msg.To, data)
			}
		case "join-room":
			if roomName, ok := msg.Data.(string); ok {
				hub.mutex.Lock()
				// Remove from old room if exists
				if c.Room != "" {
					room := hub.rooms[c.Room]
					for i, client := range room {
						if client == c {
							hub.rooms[c.Room] = append(room[:i], room[i+1:]...)
							break
						}
					}
				}
				
				// Add to new room
				c.Room = roomName
				hub.rooms[roomName] = append(hub.rooms[roomName], c)
				
				// Get current room members to notify the new client
				roomMembers := make([]string, 0, len(hub.rooms[roomName]))
				for _, member := range hub.rooms[roomName] {
					if member.ID != c.ID {
						roomMembers = append(roomMembers, member.ID)
					}
				}
				hub.mutex.Unlock()
				
				// Send existing room members to the new client
				if len(roomMembers) > 0 {
					existingMembers := Message{
						Type: "room-members",
						Room: roomName,
						Data: roomMembers,
					}
					data, _ := json.Marshal(existingMembers)
					select {
					case c.Send <- data:
					default:
						close(c.Send)
					}
				}
				
				// Notify other clients in the same room about the new member
				hub.notifyRoomMembers(roomName, c.ID, "user-joined")
				
				log.Printf("Client %s joined room %s", c.ID, roomName)
			}
		}
	}
}

func (c *Client) writePump() {
	defer c.Conn.Close()

	for {
		select {
		case message, ok := <-c.Send:
			if !ok {
				c.Conn.WriteMessage(websocket.CloseMessage, []byte{})
				return
			}

			if err := c.Conn.WriteMessage(websocket.TextMessage, message); err != nil {
				log.Printf("Error writing message: %v", err)
				return
			}
		}
	}
}

func serveWS(hub *Hub, w http.ResponseWriter, r *http.Request) {
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Printf("WebSocket upgrade error: %v", err)
		return
	}

	clientID := r.URL.Query().Get("id")
	if clientID == "" {
		clientID = fmt.Sprintf("client_%d", len(hub.clients))
	}

	client := &Client{
		ID:   clientID,
		Conn: conn,
		Send: make(chan []byte, 256),
		Room: r.URL.Query().Get("room"),
	}

	hub.register <- client

	go client.writePump()
	go client.readPump(hub)
}

func serveHTML(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}
	
	html := `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebRTC P2P Client</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #1a1a1a;
            color: #fff;
        }
        .container {
            background: #2d2d2d;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
        .status {
            padding: 15px;
            border-radius: 8px;
            margin: 10px 0;
            font-weight: bold;
        }
        .status.connected { background: #1e7e34; }
        .status.disconnected { background: #721c24; }
        .status.connecting { background: #856404; }
        
        .input-group {
            margin: 15px 0;
        }
        label {
            display: block;
            margin-bottom: 5px;
            color: #ccc;
        }
        input, button {
            padding: 12px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            width: 100%;
            box-sizing: border-box;
        }
        input {
            background: #404040;
            color: #fff;
            border: 1px solid #555;
        }
        button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            cursor: pointer;
            margin: 5px 0;
            transition: transform 0.2s;
        }
        button:hover {
            transform: translateY(-2px);
        }
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        
        .messages {
            background: #1a1a1a;
            border: 1px solid #444;
            border-radius: 8px;
            height: 200px;
            overflow-y: auto;
            padding: 15px;
            margin: 15px 0;
        }
        .message {
            margin: 8px 0;
            padding: 8px 12px;
            border-radius: 6px;
            background: #333;
        }
        .message.sent {
            background: #0d6efd;
            text-align: right;
        }
        .message.received {
            background: #198754;
        }
        .message.system {
            background: #6c757d;
            font-style: italic;
        }
        
        .peer-list {
            background: #333;
            border-radius: 8px;
            padding: 15px;
            margin: 15px 0;
        }
        .peer {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background: #404040;
            margin: 5px 0;
            border-radius: 6px;
        }
        .peer button {
            width: auto;
            padding: 5px 15px;
            font-size: 14px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>WebRTC P2P Chat</h1>
        
        <div id="status" class="status disconnected">Disconnected from server</div>
        
        <div class="input-group">
            <label for="clientId">Your ID:</label>
            <input type="text" id="clientId" placeholder="Enter your ID">
        </div>
        
        <div class="input-group">
            <label for="roomName">Room Name:</label>
            <input type="text" id="roomName" placeholder="Enter room name">
            <button onclick="joinRoom()">Join Room</button>
        </div>
        
        <div class="peer-list">
            <h3>Connected Peers</h3>
            <div id="peers"></div>
        </div>
        
        <div class="input-group">
            <label for="messageInput">Message:</label>
            <input type="text" id="messageInput" placeholder="Type your message" onkeypress="handleKeyPress(event)">
            <button onclick="sendMessage()">Send Message</button>
        </div>
        
        <div class="messages" id="messages"></div>
        
        <button onclick="connectToServer()">Connect to Server</button>
        <button onclick="disconnect()">Disconnect</button>
    </div>

    <script>
        let ws = null;
        let clientId = '';
        let currentRoom = '';
        let peers = new Map();
        let dataChannels = new Map();
        
        const iceServers = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' }
            ]
        };
        
        function updateStatus(message, className) {
            const status = document.getElementById('status');
            status.textContent = message;
            status.className = 'status ' + className;
        }
        
        function addMessage(message, type = 'system') {
            const messages = document.getElementById('messages');
            const div = document.createElement('div');
            div.className = 'message ' + type;
            div.textContent = message;
            messages.appendChild(div);
            messages.scrollTop = messages.scrollHeight;
        }
        
        function updatePeerList() {
            const peerList = document.getElementById('peers');
            peerList.innerHTML = '';
            
            peers.forEach((pc, peerId) => {
                const peerDiv = document.createElement('div');
                peerDiv.className = 'peer';
                
                const status = pc.connectionState || 'connecting';
                peerDiv.innerHTML = '<span>' + peerId + ' (' + status + ')</span><button onclick="initiatePeerConnection(\'' + peerId + '\')">Connect</button>';
                
                peerList.appendChild(peerDiv);
            });
        }
        
        function connectToServer() {
            clientId = document.getElementById('clientId').value || 'client_' + Date.now();
            document.getElementById('clientId').value = clientId;
            
            updateStatus('Connecting to server...', 'connecting');
            
            ws = new WebSocket('ws://localhost:8080/ws?id=' + clientId);
            
            ws.onopen = () => {
                updateStatus('Connected to server', 'connected');
                addMessage('Connected to signaling server');
            };
            
            ws.onmessage = (event) => {
                const message = JSON.parse(event.data);
                handleSignalingMessage(message);
            };
            
            ws.onclose = () => {
                updateStatus('Disconnected from server', 'disconnected');
                addMessage('Disconnected from signaling server');
            };
            
            ws.onerror = (error) => {
                updateStatus('Connection error', 'disconnected');
                addMessage('Connection error: ' + error.message);
            };
        }
        
        function joinRoom() {
            const roomName = document.getElementById('roomName').value;
            if (!roomName || !ws) return;
            
            currentRoom = roomName;
            
            const message = {
                type: 'join-room',
                data: roomName
            };
            
            ws.send(JSON.stringify(message));
            addMessage('Joined room: ' + roomName);
        }
        
        async function handleSignalingMessage(message) {
            switch (message.type) {
                case 'room-members':
                    // Handle existing room members when joining
                    if (message.data && Array.isArray(message.data)) {
                        for (const peerId of message.data) {
                            await createPeerConnection(peerId);
                        }
                        updatePeerList();
                        addMessage('Found ' + message.data.length + ' peer(s) in room');
                    }
                    break;
                    
                case 'user-joined':
                    if (message.from !== clientId) {
                        addMessage(message.from + ' joined the room');
                        await createPeerConnection(message.from);
                        updatePeerList();
                    }
                    break;
                    
                case 'user-left':
                    addMessage(message.from + ' left the room');
                    if (peers.has(message.from)) {
                        peers.get(message.from).close();
                        peers.delete(message.from);
                        dataChannels.delete(message.from);
                        updatePeerList();
                    }
                    break;
                    
                case 'offer':
                    await handleOffer(message);
                    break;
                    
                case 'answer':
                    await handleAnswer(message);
                    break;
                    
                case 'ice-candidate':
                    await handleIceCandidate(message);
                    break;
            }
        }
        
        async function createPeerConnection(peerId) {
            const pc = new RTCPeerConnection(iceServers);
            peers.set(peerId, pc);
            
            pc.onicecandidate = (event) => {
                if (event.candidate && ws) {
                    ws.send(JSON.stringify({
                        type: 'ice-candidate',
                        to: peerId,
                        data: event.candidate
                    }));
                }
            };
            
            pc.onconnectionstatechange = () => {
                console.log('Connection with ' + peerId + ': ' + pc.connectionState);
                updatePeerList();
                
                if (pc.connectionState === 'connected') {
                    addMessage('P2P connection established with ' + peerId, 'system');
                } else if (pc.connectionState === 'disconnected' || pc.connectionState === 'failed') {
                    addMessage('P2P connection lost with ' + peerId, 'system');
                }
            };
            
            pc.ondatachannel = (event) => {
                const channel = event.channel;
                setupDataChannel(channel, peerId);
            };
            
            return pc;
        }
        
        function setupDataChannel(channel, peerId) {
            dataChannels.set(peerId, channel);
            
            channel.onopen = () => {
                console.log('Data channel opened with ' + peerId);
            };
            
            channel.onmessage = (event) => {
                addMessage(peerId + ': ' + event.data, 'received');
            };
            
            channel.onclose = () => {
                console.log('Data channel closed with ' + peerId);
            };
        }
        
        async function initiatePeerConnection(peerId) {
            const pc = peers.get(peerId) || await createPeerConnection(peerId);
            
            const dataChannel = pc.createDataChannel('messages');
            setupDataChannel(dataChannel, peerId);
            
            const offer = await pc.createOffer();
            await pc.setLocalDescription(offer);
            
            if (ws) {
                ws.send(JSON.stringify({
                    type: 'offer',
                    to: peerId,
                    data: offer
                }));
            }
        }
        
        async function handleOffer(message) {
            const pc = peers.get(message.from) || await createPeerConnection(message.from);
            
            await pc.setRemoteDescription(message.data);
            const answer = await pc.createAnswer();
            await pc.setLocalDescription(answer);
            
            if (ws) {
                ws.send(JSON.stringify({
                    type: 'answer',
                    to: message.from,
                    data: answer
                }));
            }
        }
        
        async function handleAnswer(message) {
            const pc = peers.get(message.from);
            if (pc) {
                await pc.setRemoteDescription(message.data);
            }
        }
        
        async function handleIceCandidate(message) {
            const pc = peers.get(message.from);
            if (pc) {
                await pc.addIceCandidate(message.data);
            }
        }
        
        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (!message) return;
            
            let sent = false;
            dataChannels.forEach((channel, peerId) => {
                if (channel.readyState === 'open') {
                    channel.send(message);
                    sent = true;
                }
            });
            
            if (sent) {
                addMessage('You: ' + message, 'sent');
                messageInput.value = '';
            } else {
                addMessage('No peers connected for P2P messaging', 'system');
            }
        }
        
        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }
        
        function disconnect() {
            if (ws) {
                ws.close();
            }
            
            peers.forEach(pc => pc.close());
            peers.clear();
            dataChannels.clear();
            updatePeerList();
        }
        
        window.onload = () => {
            document.getElementById('clientId').value = 'client_' + Date.now();
        };
    </script>
</body>
</html>`
	
	w.Header().Set("Content-Type", "text/html")
	w.Write([]byte(html))
}

func main() {
	hub := newHub()
	go hub.run()

	// Serve HTML directly
	http.HandleFunc("/", serveHTML)
	
	// WebSocket endpoint
	http.HandleFunc("/ws", func(w http.ResponseWriter, r *http.Request) {
		serveWS(hub, w, r)
	})

	log.Println("WebRTC Signaling Server starting on :8080")
	log.Println("Open http://localhost:8080 in your browser")
	
	if err := http.ListenAndServe(":8080", nil); err != nil {
		log.Fatal("ListenAndServe: ", err)
	}
}